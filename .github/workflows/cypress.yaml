name: Cypress Tests

on:
  pull_request:
    branches:
      - develop
      - staging
  workflow_dispatch:

jobs:
  # Setup job to build, cache the Docker image for the backend, and prepare frontend dependencies
  setup-environment:
    name: Build and Cache Frontend & Backend
    runs-on: ubuntu-latest
    outputs:
      backend_branch: ${{ steps.backend-branch.outputs.branch }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set backend branch based on target branch of the PR
      - name: Set Backend Branch
        id: backend-branch
        run: |
          if [[ '${{ github.event.pull_request.base.ref }}' == 'staging' ]]; then
            echo "branch=staging" >> $GITHUB_OUTPUT
          else
            echo "branch=develop" >> $GITHUB_OUTPUT
          fi

      # Checkout backend repository with the specified branch
      - name: Checkout Backend Repository
        uses: actions/checkout@v3
        with:
          repository: ohcnetwork/care
          path: care
          ref: ${{ steps.backend-branch.outputs.branch }}

      # Set Backend Environment Variables
      - name: Set Backend Environment Variables
        run: |
          echo DISABLE_RATELIMIT=True >> care/docker/.prebuilt.env
          echo "CORS_ALLOWED_ORIGINS=\"[\\\"http://localhost:4000\\\"]\"" >> care/docker/.prebuilt.env
          echo JWKS_BASE64=\"$(cat .github/runner-files/jwks.b64.txt)\" >> care/docker/.prebuilt.env
        env:
          JWKS_BASE64: ${{ secrets.JWKS_BASE64 }}

      # Build Backend Docker Image
      - name: Build Backend Docker Image
        run: |
          cd care
          docker build -t care-backend:latest -f docker/Dockerfile .
          cd ..

      # Save Docker Image as Tarball for Caching
      - name: Save Backend Docker Image as Tarball
        run: docker save care-backend:latest -o care-backend.tar

      # Install Frontend Dependencies and Build
      - name: Install Frontend Dependencies and Build
        run: |
          npm install
          npm run build

      # Cache Backend Docker Image and Frontend Build
      - name: Cache Backend Docker Image and Frontend Build
        uses: actions/cache@v3
        with:
          path: |
            care-backend.tar
            node_modules
            dist  # Assuming frontend build output is in `dist` folder
          key: ${{ runner.os }}-frontend-backend-cache-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-frontend-backend-cache-

  # Parallel Cypress test jobs with Docker container setup in each job
  e2e-tests:
    name: Cypress Parallel Tests with Cached Environment
    needs: setup-environment
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job_index: [0, 1, 2, 3]  # Adjust based on the number of parallel jobs needed
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Restore Cached Backend Docker Image and Frontend Build
      - name: Restore Backend Docker Image and Frontend Build Cache
        uses: actions/cache@v3
        with:
          path: |
            care-backend.tar
            node_modules
            dist
          key: ${{ runner.os }}-frontend-backend-cache-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-frontend-backend-cache-

      # Load Docker Image from Tarball
      - name: Load Backend Docker Image
        run: docker load -i care-backend.tar

      # Start Backend Docker Container
      - name: Start Backend Docker Container
        run: |
          docker run -d --name care-backend -p 9000:9000 care-backend:latest
        env:
          JWKS_BASE64: ${{ secrets.JWKS_BASE64 }}

      # Wait for Backend to be Ready
      - name: Wait for Backend Health Check
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 10
          command: curl -o /dev/null -s -w "%{http_code}\n" http://localhost:9000
          on_retry_command: sleep 5

      # Install Frontend Dependencies (to ensure they are intact)
      - name: Install Frontend Dependencies
        run: npm ci  # `npm ci` is faster and ensures a clean install

      # Start Frontend Server
      - name: Start Frontend Server
        run: |
          npx vite preview --host &
        env:
          NODE_OPTIONS: --max_old_space_size=4096

      # Run Cypress in Parallel
      - name: Run Cypress in Parallel
        run: |
          npx cypress-split --ci-build-id ${{ github.run_id }} --record --parallel \
            --group "UI-Parallel" --spec "cypress/e2e/**/*.cy.ts" --env JOB_INDEX=${{ matrix.job_index }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title }}
          COMMIT_INFO_SHA: ${{ github.event.pull_request.head.sha }}

      # Upload Cypress Screenshots on Failure
      - name: Upload Cypress Screenshots on Failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.job_index }}
          path: cypress/screenshots

      # Upload Cypress Videos
      - name: Upload Cypress Videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-videos-${{ matrix.job_index }}
          path: cypress/videos
