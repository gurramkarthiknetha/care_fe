name: Cypress Tests

on:
  schedule:
    - cron: "30 22 * * *"
  pull_request:
    branches:
      - develop
      - staging
  workflow_dispatch:

jobs:
  # Initial setup job to run backend and frontend setup
  setup:
    name: Setup Backend and Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Backend Branch
        id: backend-branch
        run: |
          if [[ '${{ github.event.pull_request.base.ref }}' == 'staging' ]]; then
            echo "branch=staging" >> $GITHUB_OUTPUT
          else
            echo "branch=develop" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Backend Repository
        uses: actions/checkout@v3
        with:
          repository: ohcnetwork/care
          path: care
          ref: ${{ steps.backend-branch.outputs.branch }}

      - name: Start Backend Docker Containers
        run: |
          cd care
          echo DISABLE_RATELIMIT=True >> docker/.prebuilt.env
          echo "CORS_ALLOWED_ORIGINS=\"[\\\"http://localhost:4000\\\"]\"" >> docker/.prebuilt.env
          echo JWKS_BASE64=\"$(cat ../.github/runner-files/jwks.b64.txt)\" >> docker/.prebuilt.env
          make docker_config_file=docker-compose.pre-built.yaml up 
          make docker_config_file=docker-compose.pre-built.yaml load-dummy-data
          cd ..
        env:
          JWKS_BASE64: ${{ secrets.JWKS_BASE64 }}

      - name: Wait for Backend to be Ready
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 5
          command: curl -o /dev/null -s -w "%{http_code}\n" http://localhost:9000
          on_retry_command: sleep 5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Dependencies
        run: npm run install-all

      - name: Build Frontend
        run: npm run build

      - name: Cache Cypress Binary and Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/Cypress
            node_modules
          key: ${{ runner.os }}-cypress-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Start Frontend Server
        run: npx vite preview --host &

  # Parallel Cypress test jobs
  e2e-tests:
    name: Cypress Parallel Tests
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job_index: [0, 1, 2, 3]  # Adjust based on the number of parallel jobs needed
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Restore Cypress and Node Modules Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/Cypress
            node_modules
          key: ${{ runner.os }}-cypress-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Cypress Run in Parallel
        run: |
          npx cypress-split --ci-build-id ${{ github.run_id }} --record --parallel \
            --group "UI-Parallel" --spec "cypress/e2e/**/*.cy.ts" --env JOB_INDEX=${{ matrix.job_index }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title }}
          COMMIT_INFO_SHA: ${{ github.event.pull_request.head.sha }}

      - name: Upload Cypress Screenshots on Failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.job_index }}
          path: cypress/screenshots

      - name: Upload Cypress Videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-videos-${{ matrix.job_index }}
          path: cypress/videos