name: Cypress Tests

on:
  pull_request:
    branches:
      - develop
      - staging
  workflow_dispatch:

jobs:
  cypress-run:
    if: github.repository == 'ohcnetwork/care_fe' # Ensures this runs only for care_fe repo
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository üì•
        uses: actions/checkout@v3

      # Step 2: Set backend branch based on the target branch
      - name: Set backend branch
        id: backend-branch
        run: |
          if [[ '${{ github.event.pull_request.base.ref }}' == 'staging' ]]; then
            echo "branch=staging" >> $GITHUB_OUTPUT
          else
            echo "branch=develop" >> $GITHUB_OUTPUT
          fi

      # Step 3: Checkout the care backend repository
      - name: Checkout care backend üì•
        uses: actions/checkout@v3
        with:
          repository: ohcnetwork/care
          path: care
          ref: ${{ steps.backend-branch.outputs.branch }}

      # Step 4: Start care docker containers üê≥
      - name: Start care docker containers
        run: |
          cd care
          mkdir -p docker  # Ensure the docker directory exists
          touch docker/.prebuilt.env  # Ensure the .prebuilt.env file exists
          echo DISABLE_RATELIMIT=True >> docker/.prebuilt.env
          echo "CORS_ALLOWED_ORIGINS=\"[\\\"http://localhost:4000\\\"]\"" >> docker/.prebuilt.env
          echo JWKS_BASE64=\"$(cat ../.github/runner-files/jwks.b64.txt)\" >> docker/.prebuilt.env
          make docker_config_file=docker-compose.pre-built.yaml up 
          make docker_config_file=docker-compose.pre-built.yaml load-dummy-data
          cd ..

      # Step 5: Wait for the backend to be ready
      - name: Wait for backend to be up ‚ôª
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 10
          command: curl -o /dev/null -s -w "%{http_code}\n" http://localhost:9000
          on_retry_command: sleep 5

      # Step 6: Determine PR origin (whether it's a fork or not)
      - name: Determine PR Origin
        id: pr_origin
        run: echo "::set-output name=is_forked::$(echo ${{ github.event.pull_request.head.repo.fork }})"

      # Step 7: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Step 8: Install dependencies using npm ci (faster for CI)
      - name: Install dependencies üì¶
        run: npm ci

      # Step 9: Build the frontend using npm
      - name: Build frontend ‚öôÔ∏è
        run: npm run build

      # Step 10: Start frontend using Vite
      - name: Start frontend server
        run: npm run preview -- --host &
        env:
          CARE_API: http://localhost:9000

      # Step 11: Wait for the frontend to be up
      - name: Wait for frontend to be up ‚ôª
        run: npx wait-on http://localhost:4000

      # Step 12: Run Cypress tests in parallel using cypress-parallel
      - name: Run Cypress tests in parallel
        run: |
          npx cypress-parallel -s 'cypress/e2e/**/*.cy.js' -n 4 \
          --ci-build-id ${{ github.sha }}-${{ github.run_id }} \
          --browser chrome \
          --record
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CARE_API: http://localhost:9000
          NODE_OPTIONS: --max_old_space_size=4096

      # Step 13: Upload Cypress screenshots on failure üì∏
      - name: Upload Cypress screenshots on failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      # Step 14: Upload Cypress videos üìπ
      - name: Upload Cypress videos on failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos
